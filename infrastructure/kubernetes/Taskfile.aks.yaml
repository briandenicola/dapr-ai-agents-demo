version: "3"

tasks:
  default:
    cmds:
      - task --list

  branch:
    internal: true
    cmds:
    - git branch {{.TAG_NAME}} 2>>/dev/null || true
    - git checkout {{.TAG_NAME}} 
    vars:
      TAG_NAME:
        sh: terraform output -raw APP_NAME

  up:
    desc: Creates a complete Azure environment for {{.TITLE}}
    deps:
    - task: init
    cmds:
      - task: apply
      - task: creds
      - task: core
      - task: build
      - task: deploy
      - task: dns

  init:
    run: when_changed  
    desc: Initializes Terraform for {{.TITLE}}
    cmds:
      - terraform workspace new {{.REGION}} || true
      - terraform workspace select {{.REGION}}
      - terraform init
    vars:
      REGION: "{{default .DEFAULT_REGION .CLI_ARGS}}"
    status:
      - test -d terraform.tfstate.d      
      - test -d .terraform
      - test -f .terraform.lock.hcl

  apply:
    cmds:
      - terraform apply -auto-approve  -compact-warnings
        -var "region={{.REGION}}"
        -var "node_sku={{.SKU}}"
        -var "node_count={{.COUNT}}"
        -var "tags={{.TITLE}}"
        -var "custom_domain={{.APP_URL}}"
        -var "certificate_base64_encoded={{.CERT}}" 
        -var "certificate_password={{.CERT_PFX_PASS}}"
    vars:
      REGION: "{{default .DEFAULT_REGION .CLI_ARGS}}"
      CERT:
        sh: cat {{.CERT_PATH}} | base64

  creds:
    desc: Gets credential file for newly created AKS cluster
    cmds:
      - az aks get-credentials -g {{.RG}} -n {{.AKS}} --overwrite-existing
      - sed -i s/devicecode/azurecli/g ~/.kube/config
    vars:
      RG:
        sh: terraform output -raw AKS_RESOURCE_GROUP
      AKS:
        sh: terraform output -raw AKS_CLUSTER_NAME

  # build:
  #   desc: Builds application via ACR tasks
  #   dir: ./src/api
  #   cmds:
  #     - task: branch
  #     - az acr build -t rome/locator-api:{{.COMMIT_VERSION}} -r {{.ACR_NAME}} .
  #     - git checkout main 
  #   vars:
  #     ACR_NAME:
  #       sh: terraform -chdir=../../infrastructure output -raw ACR_NAME
  #     COMMIT_VERSION:
  #       sh: git rev-parse HEAD | cut -c 1-8

  # ui:
  #   desc: Builds and Deploys the UI code to Azure Static Web Apps
  #   dir: ./src/ui
  #   cmds:
  #     - echo EXPO_PUBLIC_API_URL={{.APIM_GATEWAY}} > .env
  #     - echo EXPO_PUBLIC_API_KEY={{.APIM_SUBSCRIPTION_ID}} >> .env
  #     - source .env
  #     - npm install
  #     - npx expo export --platform web -c
  #     - cmd: swa deploy --env production --app-location dist --deployment-token {{.DEPLOY_TOKEN}}
  #       silent: true
  #   vars:
  #     SWA:
  #       sh: terraform -chdir=../../infrastructure output -raw AZURE_STATIC_WEBAPP_NAME
  #     DEPLOY_TOKEN:
  #       sh: az staticwebapp secrets list --name {{.SWA}} --query "properties.apiKey" -o tsv
  #     APIM_GATEWAY:
  #       sh: terraform -chdir=../../infrastructure output -raw APIM_GATEWAY        
  #     APIM_SUBSCRIPTION_ID:
  #       sh: terraform -chdir=../../infrastructure output -raw APIM_SUBSCRIPTION_ID            

  # deploy:
  #   desc: Deploys application via Helm/GitOps
  #   cmds:
  #     - task: branch 
  #     - helm template {{.HELM_CHART}}
  #       --set ACR.NAME="{{.ACR_NAME}}.azurecr.io"
  #       --set APP.VERSION={{.COMMIT_VERSION}}
  #       --set APP.TAG_NAME={{.TAG_NAME}}
  #       --set WORKLOAD_ID.NAME={{.WORKLOAD_ID_NAME}}
  #       --set WORKLOAD_ID.CLIENT_ID={{.WORKLOAD_CLIENT_ID}}
  #       --set WORKLOAD_ID.TENANT_ID={{.WORKLOAD_TENANT_ID}}        
  #       --set OPENAI.MODEL_NAME={{.MODEL_NAME}}
  #       --set OPENAI.ENDPOINT={{.OPENAI_ENDPOINT}} ./charts/api > 
  #       ./cluster-config/api/components.yaml
  #     - git add ./cluster-config/api/components.yaml || true
  #     - git commit -m "[{{.DATE_TIME}}] - Updates for {{.TAG_NAME}} app ü§ñü§ñü§ñ components" || true
  #     - git push --set-upstream origin {{.TAG_NAME}} || true
  #     - git checkout main        
  #   vars:
  #     TAG_NAME:
  #       sh: terraform  output -raw APP_NAME
  #     WORKLOAD_ID_NAME:
  #       sh: terraform  output -raw WORKLOAD_ID_NAME        
  #     WORKLOAD_CLIENT_ID:
  #       sh: terraform  output -raw WORKLOAD_CLIENT_ID
  #     WORKLOAD_TENANT_ID:
  #       sh: terraform  output -raw WORKLOAD_TENANT_ID
  #     ACR_NAME:
  #       sh: terraform  output -raw ACR_NAME
  #     OPENAI_ENDPOINT:
  #       sh: terraform  output -raw OPENAI_ENDPOINT     
  #     COMMIT_VERSION:
  #       sh: git rev-parse HEAD | cut -c 1-8 
  #     DATE_TIME:
  #       sh: date        

  core:
    desc: Deploys Istio Certificate and Otel infrastructure via Helm/GitOps
    dir: ../../
    cmds:
      - task: branch
      - helm template {{.HELM_CHART}}
        --set APP.TAG_NAME={{.TAG_NAME}}
        --set ISTIO.CLIENT_ID={{.ISTIO_CLIENT_ID}}
        --set ISTIO.TENANT_ID={{.ISTIO_TENANT_ID}}
        --set ISTIO.KEYVAULT_NAME={{.KEYVAULT_NAME}}        
        --set OTEL.CLIENT_ID={{.OTEL_CLIENT_ID}}
        --set OTEL.TENANT_ID={{.OTEL_TENANT_ID}}
        --set OTEL.WORKLOAD_ID_NAME={{.OTEL_WORKLOAD_ID_NAME}}                
        --set APP_INSIGHTS.CONNECTION_STRING="{{.APP_INSIGHTS_CONNECTION_STRING}}"
        --set APP_INSIGHTS.INSTRUMENTATION_KEY={{.APP_INSIGHTS_INSTRUMENTATION_KEY}}
        --set APP_INSIGHTS.INGESTION_ENDPOINT={{.INGESTION_ENDPOINT}}
        ./charts/infra > ./cluster-config/infrastructure/components.yaml
      - git add ./cluster-config/infrastructure/components.yaml || true
      - git commit -m "[{{.DATE_TIME}}] - Updates for {{.TAG_NAME}} infra üñ•Ô∏è certificates" || true
      - git push --set-upstream origin {{.TAG_NAME}} || true
      - git checkout main      
    vars:
      DATE_TIME:
        sh: date     
      TAG_NAME:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw APP_NAME
      APP_INSIGHTS_CONNECTION_STRING:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw APP_INSIGHTS_CONNECTION_STRING
      APP_INSIGHTS_INSTRUMENTATION_KEY:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw APP_INSIGHTS_INSTRUMENTATION_KEY
      ISTIO_CLIENT_ID:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw ISTIO_CLIENT_ID
      ISTIO_TENANT_ID:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw ISTIO_TENANT_ID 
      OTEL_WORKLOAD_ID_NAME:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw OTEL_WORKLOAD_ID_NAME
      OTEL_CLIENT_ID:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw OTEL_CLIENT_ID
      OTEL_TENANT_ID:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw ISTIO_TENANT_ID
      KEYVAULT_NAME:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw KEYVAULT_NAME
      INGESTION_ENDPOINT:
        sh: terraform -chdir=./infrastructure/kubernetes output -raw APP_INSIGHTS_CONNECTION_STRING | grep -oP 'IngestionEndpoint=\K[^;]+' | sed 's:/$::'

  dns:
    desc: Gets the IP Address of the Istio Gateway
    dir: ./scripts
    cmds:
    - cmd: echo -e '‚û°Ô∏è\033[1m\e[38;5;45mThe Azure APIM Backend locator.{{.DEFAULT_DOMAIN}} should resolve to {{.IP}}'
      silent: true
    vars:
      IP: 
        sh: kubectl --namespace aks-istio-ingress get service aks-istio-ingressgateway-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}'

  restart:
    desc: Performs a rollout restart on all deployments in {{.NAMESPACE}} namespace
    cmds:
    - kubectl -n {{.NAMESPACE}} rollout restart deploy

  down:
    desc: Destroys all Azure resources and cleans up Terraform
    cmds:
      - az group list --tag Application="{{.TITLE}}" --query "[].name" -o tsv | xargs -ot -n 1 az group delete -y --no-wait -n || true
      - rm -rf terraform.tfstate.d .terraform.lock.hcl .terraform terraform.tfstate terraform.tfstate.backup .terraform.tfstate.lock.info || true
      - git branch -D {{.APP_NAME}} || true
    vars:
      APP_NAME:
        sh: terraform output -raw APP_NAME